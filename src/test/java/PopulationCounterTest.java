/*
 * This Java source file was generated by the Gradle 'init' task.
 */

// import static org.junit.Assert.assertEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
// import static org.mockito.Mockito.when;
import static org.mockito.BDDMockito.given;
import static org.mockito.BDDMockito.then;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
// import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.Test;

// import org.junit.Test;


public class PopulationCounterTest {
    @Test
    public void testSomeLibraryMethod() throws Exception {

        // Setup
        String expected = "World population is: 1,347,982,728\n";

        // https://stackoverflow.com/questions/8708342/redirect-console-output-to-string-in-java
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream ps = new PrintStream(baos);
        PrintStream old = System.out;
        System.setOut(ps);

        // Exercise
        PopulationCounter.main(new String[] {"./data/worldcitiespop.csv"});

        // Assert
        System.out.flush();
        String output = baos.toString();
        assertEquals("Population counter should return correct total", expected, output );

        // Teardown
        System.setOut(old);
    }

    @Test
    public void getcsvreader() throws Exception{
        // mocking
        CSV_reader reader = mock(CSV_reader.class);
        //setup
        given(reader.filereaderdata()).willReturn(Arrays.asList("ad,aixas,Aixs,06,,42.4833333,1.4666667"));
        // exercise
        List<String> readData = reader.filereaderdata();
        then(reader).should(times(1)).filereaderdata();
        // assert
        String line = readData.get(0);
        assertEquals("aixas,Aixs,06,,42.4833333,1.4666667", line);
    }

    @Test
    public void getparsedata(){
        // mocking
        Parse parse = mock(Parse.class);
        // setup
        List<String[]> pdata = new ArrayList<>();
        String[] line1 = {"ad","aixas","06","","42.4833333","1.4666667"};
        pdata.add(line1);
        given(parse.pasreddata()).willReturn(pdata);
        // exercise
        List<String[]> parseddata = parse.pasreddata();
        then(parse).should(times(1)).pasreddata();
        // assert
        assertEquals(pdata, parseddata);
    }

    @Test
    public void getsum(){
        // mocking
        Sum sum = mock(Sum.class);
        // setup
        long expected = 1347982728l;
        // assert
        assertEquals(expected, sum);
    } 

}
